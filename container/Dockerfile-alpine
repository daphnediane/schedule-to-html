ARG OSNAME="alpine"
ARG OSLABEL="latest"

FROM ${OSNAME}:${OSLABEL} AS base

ARG OSLABEL
ARG OSNAME
ARG CACHE_PKG_VAR="${OSNAME}-${OSLABEL}-apk"

# Setup apk and some base packages
RUN --mount=type=cache,id=${CACHE_PKG_VAR},target=/var/cache/apk,sharing=locked \
    ln -n -s -f /var/cache/apk /etc/apk/cache \
    && apk update \
    && apk add \
    docs \
    git \
    man-pages \
    mandoc \
    mandoc-apropos \
    shadow

FROM base AS initial-user-env

ARG CACHE_PKG_VAR
ARG OSLABEL
ARG OSNAME
ARG USER_NAME=devel
ARG USER_ID=1000
ARG USER_SHELL="/bin/bash"
ARG GROUP_NAME=${USER_NAME}
ARG GROUP_ID=${USER_ID}

# Create the user
RUN groupadd --gid "${GROUP_ID}" "${GROUP_NAME}" \
    && useradd --uid "${USER_ID}" --gid "${GROUP_ID}" -m "${USER_NAME}" -s "${USER_SHELL}" \
    && mkdir -m 0640 -p /etc/sudoers.d \
    && echo "${USER_NAME}" ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/"${USER_NAME}" \
    && chmod 0440 /etc/sudoers.d/"${USER_NAME}" \
    && mkdir -p \
    /home/"$USER_NAME"/.ssh \
    /home/"$USER_NAME"/bin \
    /home/vscode-server \
    /workspaces \
    && chmod -R go-rwx /root \
    && chown -R "$USER_NAME":"$GROUP_NAME" \
    /home/"$USER_NAME" \
    /home/vscode-server \
    /workspaces \
    && chmod -R go-rwx /home/"$USER_NAME"/.ssh \
    && chmod -R u+rwx /home/"$USER_NAME"/bin \
    && ln -n -s -f /home/vscode-server /home/"$USER_NAME"/.vscode-server \
    && git config --system push.default simple \
    && git config --system init.defaultBranch main

FROM initial-user-env AS add-packages

ARG CACHE_PKG_VAR
ARG GROUP_ID
ARG GROUP_NAME
ARG OSLABEL
ARG OSNAME
ARG USER_ID
ARG USER_NAME
ARG USER_SHELL

# Base applications
RUN --mount=type=cache,id=${CACHE_PKG_VAR},target=/var/cache/apk,sharing=locked \
    apk add \
    build-base \
    curl \
    diffutils \
    expat expat-dev \
    gpg \
    less \
    lighttpd \
    make \
    nodejs \
    npm \
    openssh-client-default openssh-keygen \
    openssl openssl-dev \
    procps-ng \
    rsync \
    sudo \
    tar \
    tmux \
    xz \
    zlib zlib-dev \
    zsh

FROM add-packages AS add-cpanm

ARG CACHE_PKG_VAR
ARG GROUP_ID
ARG GROUP_NAME
ARG OSLABEL
ARG OSNAME
ARG USER_ID
ARG USER_NAME
ARG USER_SHELL
ARG CACHE_CPANM="${OSNAME}-${OSLABEL}-cpanm"

# Install perl, cpanm, and cpm
# Based on https://github.com/Perl/docker-perl/
# And issue #23/#24
WORKDIR /usr/src/perl
RUN --mount=type=cache,id=${CACHE_PKG_VAR},target=/var/cache/apk,sharing=locked \
    --mount=type=cache,id=${CACHE_CPANM},target=/root/.cpanm,sharing=locked \
    --mount=type=tmpfs,target=/tmp \
    apk add --virtual .build-deps \
    build-base \
    curl \
    dpkg dpkg-dev \
    expat expat-dev \
    make \
    openssl openssl-dev \
    procps \
    tar \
    wget \
    xz \
    zlib zlib-dev \
    && curl -fL https://cpan.metacpan.org/authors/id/H/HA/HAARG/perl-5.40.0.tar.gz -o perl-5.40.0.tar.gz \
    && echo 'c740348f357396327a9795d3e8323bafd0fe8a5c7835fc1cbaba0cc8dfe7161f *perl-5.40.0.tar.gz' | sha256sum -c - \
    && tar --strip-components=1 -xaf perl-5.40.0.tar.gz -C /usr/src/perl \
    && rm perl-5.40.0.tar.gz \
    && cat *.patch | patch -p1 \
    && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
    && archBits="$(dpkg-architecture --query DEB_BUILD_ARCH_BITS)" \
    && archFlag="$([ "$archBits" = '64' ] && echo '-Duse64bitall' || echo '-Duse64bitint')" \
    && ./Configure -Darchname="$gnuArch" "$archFlag" -Duseshrplib -Dvendorprefix=/usr/local  -des \
    && make -j$(nproc) \
    && TEST_JOBS=$(nproc) make test_harness \
    && make install \
    && cd /usr/src \
    && curl -fLO https://www.cpan.org/authors/id/M/MI/MIYAGAWA/App-cpanminus-1.7047.tar.gz \
    && echo '963e63c6e1a8725ff2f624e9086396ae150db51dd0a337c3781d09a994af05a5 *App-cpanminus-1.7047.tar.gz' | sha256sum -c - \
    && tar -xzf App-cpanminus-1.7047.tar.gz && cd App-cpanminus-1.7047 && perl bin/cpanm . && cd /root \
    && cpanm IO::Socket::SSL XML::Parser \
    && curl -fL https://raw.githubusercontent.com/skaji/cpm/0.997017/cpm -o /usr/local/bin/cpm \
    # sha256 checksum is from docker-perl team, cf https://github.com/docker-library/official-images/pull/12612#issuecomment-1158288299
    && echo 'e3931a7d994c96f9c74b97d1b5b75a554fc4f06eadef1eca26ecc0bdcd1f2d11 */usr/local/bin/cpm' | sha256sum -c - \
    && chmod +x /usr/local/bin/cpm \
    && runDeps="$( \
    scanelf --needed --nobanner --recursive /usr/local \
    | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
    | sort -u \
    | xargs -r apk info --installed \
    | sort -u \
    | grep -v perl \
    )" \
    && apk add --virtual .perl-rundeps $runDeps make wget \
    && apk del .build-deps \
    && rm -fr /usr/src/perl /usr/src/App-cpanminus-1.7046* \
    && cpanm --version && cpm --version
WORKDIR /

FROM add-cpanm AS add-perl-modules

ARG CACHE_CPANM
ARG CACHE_PKG_VAR
ARG GROUP_ID
ARG GROUP_NAME
ARG OSLABEL
ARG OSNAME
ARG USER_ID
ARG USER_NAME
ARG USER_SHELL

# TODO - Consider using Carton or Carmel
# https://metacpan.org/pod/Carton
# https://metacpan.org/pod/Carmel

# Perl modules requiring special handling
# Archive::Zip requires full unzip, not busybox for testing
# IO::AIO - t/05_readdir.t  -- test fails so disable testing for now
# Perl::LanguageServer and Spreadsheet::ParseXLSX take a lot of time to install
RUN --mount=type=cache,id=${CACHE_PKG_VAR},target=/var/cache/apk,sharing=locked \
    --mount=type=cache,id=${CACHE_CPANM},target=/root/.cpanm,sharing=locked \
    apk add --virtual .test-deps unzip \
    && cpanm Archive::Zip \
    && cpanm -n IO::AIO \
    && cpanm \
    Perl::LanguageServer \
    Spreadsheet::ParseXLSX \
    && apk del .test-deps

# Other perl modules
RUN --mount=type=cache,id=${CACHE_CPANM},target=/root/.cpanm,sharing=locked \
    cpanm \
    Carmel \
    Carton \
    common::sense \
    Date::Parse \
    Devel::NYTProf \
    Feature::Compat::Class \
    File::Slurp \
    HTML::Tiny \
    List::MoreUtils \
    Object::InsideOut \
    Perl::Critic \
    Perl::Critic::TooMuchCode \
    Perl::Tidy \
    Readonly \
    Readonly::XS

FROM add-perl-modules AS user-env

ARG CACHE_CPANM
ARG CACHE_PKG_VAR
ARG GROUP_ID
ARG GROUP_NAME
ARG OSLABEL
ARG OSNAME
ARG USER_ID
ARG USER_NAME
ARG USER_SHELL

# Set up VS Code directories
RUN true \
    && mkdir -p \
    /home/vscode-server \
    /workspaces \
    && chown -R "$USER_NAME":"$GROUP_NAME" \
    /home/vscode-server \
    /workspaces \
    && ln -n -s -f /home/vscode-server /home/"$USER_NAME"/.vscode-server

USER ${USER_NAME}
